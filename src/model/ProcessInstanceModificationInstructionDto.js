/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TriggerVariableValueDto from './TriggerVariableValueDto';

/**
 * The ProcessInstanceModificationInstructionDto model module.
 * @module model/ProcessInstanceModificationInstructionDto
 * @version 7.14.0
 */
class ProcessInstanceModificationInstructionDto {
    /**
     * @member {ProcessInstanceModificationInstructionDto.TypeEnum} type
     * @type {ProcessInstanceModificationInstructionDto.TypeEnum}
     */
    type;
    /**
     * @member {TriggerVariableValueDto} variables
     * @type {TriggerVariableValueDto}
     */
    variables;
    /**
     * @member {String} activityId
     * @type {String}
     */
    activityId;
    /**
     * @member {String} transitionId
     * @type {String}
     */
    transitionId;
    /**
     * @member {String} activityInstanceId
     * @type {String}
     */
    activityInstanceId;
    /**
     * @member {String} transitionInstanceId
     * @type {String}
     */
    transitionInstanceId;
    /**
     * @member {String} ancestorActivityInstanceId
     * @type {String}
     */
    ancestorActivityInstanceId;
    /**
     * @member {Boolean} cancelCurrentActiveActivityInstances
     * @type {Boolean}
     */
    cancelCurrentActiveActivityInstances;

    

    /**
     * Constructs a new <code>ProcessInstanceModificationInstructionDto</code>.
     * @alias module:model/ProcessInstanceModificationInstructionDto
     * @param type {ProcessInstanceModificationInstructionDto.TypeEnum} **Mandatory**. One of the following values: `cancel`, `startBeforeActivity`, `startAfterActivity`, `startTransition`.  * A cancel instruction requests cancellation of a single activity instance or all instances of one activity. * A startBeforeActivity instruction requests to enter a given activity. * A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. * A startTransition instruction requests to execute a specific sequence flow.
     */
    constructor(type) { 
        
        ProcessInstanceModificationInstructionDto.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ProcessInstanceModificationInstructionDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProcessInstanceModificationInstructionDto} obj Optional instance to populate.
     * @return {module:model/ProcessInstanceModificationInstructionDto} The populated <code>ProcessInstanceModificationInstructionDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProcessInstanceModificationInstructionDto();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = TriggerVariableValueDto.constructFromObject(data['variables']);
            }
            if (data.hasOwnProperty('activityId')) {
                obj['activityId'] = ApiClient.convertToType(data['activityId'], 'String');
            }
            if (data.hasOwnProperty('transitionId')) {
                obj['transitionId'] = ApiClient.convertToType(data['transitionId'], 'String');
            }
            if (data.hasOwnProperty('activityInstanceId')) {
                obj['activityInstanceId'] = ApiClient.convertToType(data['activityInstanceId'], 'String');
            }
            if (data.hasOwnProperty('transitionInstanceId')) {
                obj['transitionInstanceId'] = ApiClient.convertToType(data['transitionInstanceId'], 'String');
            }
            if (data.hasOwnProperty('ancestorActivityInstanceId')) {
                obj['ancestorActivityInstanceId'] = ApiClient.convertToType(data['ancestorActivityInstanceId'], 'String');
            }
            if (data.hasOwnProperty('cancelCurrentActiveActivityInstances')) {
                obj['cancelCurrentActiveActivityInstances'] = ApiClient.convertToType(data['cancelCurrentActiveActivityInstances'], 'Boolean');
            }
        }
        return obj;
    }
}


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ProcessInstanceModificationInstructionDto['TypeEnum'] = {

    /**
     * value: "cancel"
     * @const
     */
    "cancel": "cancel",

    /**
     * value: "startBeforeActivity"
     * @const
     */
    "startBeforeActivity": "startBeforeActivity",

    /**
     * value: "startAfterActivity"
     * @const
     */
    "startAfterActivity": "startAfterActivity",

    /**
     * value: "startTransition"
     * @const
     */
    "startTransition": "startTransition"
};



export default ProcessInstanceModificationInstructionDto;

