/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import AuthorizationExceptionDto from '../model/AuthorizationExceptionDto';
import ExceptionDto from '../model/ExceptionDto';
import SignalDto from '../model/SignalDto';

/**
* Signal service.
* @module api/SignalApi
* @version 7.14.0
*/
export default class SignalApi extends ApiClient {

    /**
    * Constructs a new SignalApi. 
    * @alias module:api/SignalApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * A signal is an event of global scope (broadcast semantics) and is delivered to all active handlers. Internally this maps to the engine's signal event received builder method `RuntimeService#createSignalEvent()`. For more information about the signal behavior, see the [Signal Events](https://docs.camunda.org/manual/7.14/reference/bpmn20/events/signal-events/) section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.14/reference/bpmn20/).
     * @param {Object} opts Optional parameters
     * @param {SignalDto} opts.signalDto 
     * @return {Promise}
     */
    async throwSignal(opts) {
      opts = opts || {};
      let postBody = opts['signalDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.callApi(
        '/signal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
