/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import ExceptionDto from '../model/ExceptionDto';
import MetricsIntervalResultDto from '../model/MetricsIntervalResultDto';
import MetricsResultDto from '../model/MetricsResultDto';

/**
* Metrics service.
* @module api/MetricsApi
* @version 7.14.0
*/
export default class MetricsApi extends ApiClient {

    /**
    * Constructs a new MetricsApi. 
    * @alias module:api/MetricsApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Retrieves the `sum` (count) for a given metric.
     * @param {String} metricsName The name of the metric.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate The start date (inclusive).
     * @param {Date} opts.endDate The end date (exclusive).
     * @return {Promise<MetricsResultDto>}
     */
    async getMetrics(metricsName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'metricsName' is set
      if (metricsName === undefined || metricsName === null) {
        throw new Error("Missing the required parameter 'metricsName' when calling getMetrics");
      }

      let pathParams = {
        'metrics-name': metricsName
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricsResultDto;

      return this.callApi(
        '/metrics/{metrics-name}/sum', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves a list of metrics, aggregated for a given interval.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The name of the metric.
     * @param {String} opts.reporter The name of the reporter (host), on which the metrics was logged. This will have value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.14/reference/deployment-descriptors/tags/process-engine/#hostname).
     * @param {Date} opts.startDate The start date (inclusive).
     * @param {Date} opts.endDate The end date (exclusive).
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.interval The interval for which the metrics should be aggregated. Time unit is seconds. Default: The interval is set to 15 minutes (900 seconds). (default to '900')
     * @param {String} opts.aggregateByReporter Aggregate metrics by reporter.
     * @return {Promise<Array.<MetricsIntervalResultDto>>}
     */
    async interval(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'reporter': opts['reporter'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults'],
        'interval': opts['interval'],
        'aggregateByReporter': opts['aggregateByReporter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MetricsIntervalResultDto];

      return this.callApi(
        '/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
