/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import AnyType from '../model/AnyType';
import CountResultDto from '../model/CountResultDto';
import ExceptionDto from '../model/ExceptionDto';
import ResourceOptionsDto from '../model/ResourceOptionsDto';
import UserCredentialsDto from '../model/UserCredentialsDto';
import UserDto from '../model/UserDto';
import UserProfileDto from '../model/UserProfileDto';

/**
* User service.
* @module api/UserApi
* @version 7.14.0
*/
export default class UserApi extends ApiClient {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Options
     * The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such and one for individual user instances. The `OPTIONS` request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user's authorizations to interact with this resource and the internal configuration of the process engine.
     * @return {Promise<ResourceOptionsDto>}
     */
    async availableOperations() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOptionsDto;

      return this.callApi(
        '/user', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Options
     * The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such and one for individual user instances. The `OPTIONS` request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user's authorizations to interact with this resource and the internal configuration of the process engine.
     * @param {String} id The id of the user to be deleted.
     * @return {Promise<ResourceOptionsDto>}
     */
    async availableUserOperations(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling availableUserOperations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOptionsDto;

      return this.callApi(
        '/user/{id}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create a new user.
     * @param {Object} opts Optional parameters
     * @param {UserDto} opts.userDto 
     * @return {Promise}
     */
    async createUser(opts) {
      opts = opts || {};
      let postBody = opts['userDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/user/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * Deletes a user by id.
     * @param {String} id The id of the user to be deleted.
     * @return {Promise}
     */
    async deleteUser(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.callApi(
        '/user/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get List Count
     * Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Users](https://docs.camunda.org/manual/7.14/reference/rest/user/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Filter by user id
     * @param {String} opts.idIn Filter by a comma-separated list of user ids.
     * @param {String} opts.firstName Filter by the first name of the user. Exact match.
     * @param {String} opts.firstNameLike Filter by the first name that the parameter is a substring of.
     * @param {String} opts.lastName Filter by the last name of the user. Exact match.
     * @param {String} opts.lastNameLike Filter by the last name that the parameter is a substring of.
     * @param {String} opts.email Filter by the email of the user. Exact match.
     * @param {String} opts.emailLike Filter by the email that the parameter is a substring of.
     * @param {String} opts.memberOfGroup Filter for users which are members of the given group.
     * @param {String} opts.memberOfTenant Filter for users which are members of the given tenant.
     * @param {String} opts.potentialStarter Only select Users that are potential starter for the given process definition.
     * @return {Promise<CountResultDto>}
     */
    async getUserCount(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'idIn': opts['idIn'],
        'firstName': opts['firstName'],
        'firstNameLike': opts['firstNameLike'],
        'lastName': opts['lastName'],
        'lastNameLike': opts['lastNameLike'],
        'email': opts['email'],
        'emailLike': opts['emailLike'],
        'memberOfGroup': opts['memberOfGroup'],
        'memberOfTenant': opts['memberOfTenant'],
        'potentialStarter': opts['potentialStarter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.callApi(
        '/user/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Profile
     * Retrieves a user's profile.
     * @param {String} id The id of the user to retrieve.
     * @return {Promise<Array.<UserProfileDto>>}
     */
    async getUserProfile(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserProfile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserProfileDto];

      return this.callApi(
        '/user/{id}/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get List
     * Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method. [Get User Count](https://docs.camunda.org/manual/7.14/reference/rest/user/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Filter by user id
     * @param {String} opts.idIn Filter by a comma-separated list of user ids.
     * @param {String} opts.firstName Filter by the first name of the user. Exact match.
     * @param {String} opts.firstNameLike Filter by the first name that the parameter is a substring of.
     * @param {String} opts.lastName Filter by the last name of the user. Exact match.
     * @param {String} opts.lastNameLike Filter by the last name that the parameter is a substring of.
     * @param {String} opts.email Filter by the email of the user. Exact match.
     * @param {String} opts.emailLike Filter by the email that the parameter is a substring of.
     * @param {String} opts.memberOfGroup Filter for users which are members of the given group.
     * @param {String} opts.memberOfTenant Filter for users which are members of the given tenant.
     * @param {String} opts.potentialStarter Only select Users that are potential starter for the given process definition.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @return {Promise<Array.<UserProfileDto>>}
     */
    async getUsers(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'idIn': opts['idIn'],
        'firstName': opts['firstName'],
        'firstNameLike': opts['firstNameLike'],
        'lastName': opts['lastName'],
        'lastNameLike': opts['lastNameLike'],
        'email': opts['email'],
        'emailLike': opts['emailLike'],
        'memberOfGroup': opts['memberOfGroup'],
        'memberOfTenant': opts['memberOfTenant'],
        'potentialStarter': opts['potentialStarter'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserProfileDto];

      return this.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unlock User
     * Unlocks a user by id.
     * @param {String} id The id of the user to be unlocked.
     * @return {Promise}
     */
    async unlockUser(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unlockUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.callApi(
        '/user/{id}/unlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update Credentials
     * Updates a user's credentials (password)
     * @param {String} id The id of the user to be updated.
     * @param {String} password The users new password.
     * @param {String} authenticatedUserPassword The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).
     * @param {Object} opts Optional parameters
     * @param {UserCredentialsDto} opts.userCredentialsDto 
     * @return {Promise<AnyType>}
     */
    async updateCredentials(id, password, authenticatedUserPassword, opts) {
      opts = opts || {};
      let postBody = opts['userCredentialsDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCredentials");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling updateCredentials");
      }
      // verify the required parameter 'authenticatedUserPassword' is set
      if (authenticatedUserPassword === undefined || authenticatedUserPassword === null) {
        throw new Error("Missing the required parameter 'authenticatedUserPassword' when calling updateCredentials");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'password': password,
        'authenticatedUserPassword': authenticatedUserPassword
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnyType;

      return this.callApi(
        '/user/{id}/credentials', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
