/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import ExceptionDto from '../model/ExceptionDto';
import HistoryTaskDto from '../model/HistoryTaskDto';

/**
* HistoricTasks service.
* @module api/HistoricTasksApi
* @version 7.14.0
*/
export default class HistoricTasksApi extends ApiClient {

    /**
    * Constructs a new HistoricTasksApi. 
    * @alias module:api/HistoricTasksApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Get List
     * Queries for historic tasks that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Task Count](https://docs.camunda.org/manual/latest/reference/rest/history/task/get-task-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.taskId Filter by task id.
     * @param {String} opts.taskParentTaskId Filter by parent task id.
     * @param {String} opts.processInstanceId Filter by process instance id.
     * @param {String} opts.processInstanceBusinessKey Filter by process instance business key.
     * @param {String} opts.processInstanceBusinessKeyIn Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list.
     * @param {String} opts.processInstanceBusinessKeyLike Filter by process instance business key that has the parameter value as a substring.
     * @param {String} opts.executionId Filter by the id of the execution that executed the task.
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.processDefinitionKey Restrict to tasks that belong to a process definition with the given key.
     * @param {String} opts.processDefinitionName Restrict to tasks that belong to a process definition with the given name.
     * @param {String} opts.caseInstanceId Filter by case instance id.
     * @param {String} opts.caseExecutionId Filter by the id of the case execution that executed the task.
     * @param {String} opts.caseDefinitionId Filter by case definition id.
     * @param {String} opts.caseDefinitionKey Restrict to tasks that belong to a case definition with the given key.
     * @param {String} opts.caseDefinitionName Restrict to tasks that belong to a case definition with the given name.
     * @param {String} opts.activityInstanceIdIn Only include tasks which belong to one of the passed and comma-separated activity instance ids.
     * @param {String} opts.taskName Restrict to tasks that have the given name.
     * @param {String} opts.taskNameLike Restrict to tasks that have a name with the given parameter value as substring.
     * @param {String} opts.taskDescription Restrict to tasks that have the given description.
     * @param {String} opts.taskDescriptionLike Restrict to tasks that have a description that has the parameter value as a substring.
     * @param {String} opts.taskDefinitionKey Restrict to tasks that have the given key.
     * @param {String} opts.taskDefinitionKeyIn Restrict to tasks that have one of the passed and comma-separated task definition keys.
     * @param {String} opts.taskDeleteReason Restrict to tasks that have the given delete reason.
     * @param {String} opts.taskDeleteReasonLike Restrict to tasks that have a delete reason that has the parameter value as a substring.
     * @param {String} opts.taskAssignee Restrict to tasks that the given user is assigned to.
     * @param {String} opts.taskAssigneeLike Restrict to tasks that are assigned to users with the parameter value as a substring.
     * @param {String} opts.taskOwner Restrict to tasks that the given user owns.
     * @param {String} opts.taskOwnerLike Restrict to tasks that are owned by users with the parameter value as a substring.
     * @param {String} opts.taskPriority Restrict to tasks that have the given priority.
     * @param {Boolean} opts.assigned If set to true, restricts the query to all tasks that are assigned. (default to false)
     * @param {Boolean} opts.unassigned If set to true, restricts the query to all tasks that are unassigned. (default to false)
     * @param {Boolean} opts.finished Only include finished tasks. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.unfinished Only include unfinished tasks. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.processFinished Only include tasks of finished processes. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.processUnfinished Only include tasks of unfinished processes. Value may only be true, as false is the default behavior. (default to false)
     * @param {String} opts.taskDueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {String} opts.taskDueDateBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {String} opts.taskDueDateAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {String} opts.taskFollowUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {String} opts.taskFollowUpDateBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {String} opts.taskFollowUpDateAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {String} opts.startedBefore Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {String} opts.startedAfter Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {String} opts.finishedBefore Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {String} opts.finishedAfter Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include historic task instances that belong to no tenant. Value may only be true, as false is the default behavior. (default to false)
     * @param {String} opts.taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {String} opts.processVariables Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     * @param {Boolean} opts.variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set `variableName` and `variablename` are treated as equal. (default to false)
     * @param {Boolean} opts.variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set `variableValue` and `variablevalue` are treated as equal. (default to false)
     * @param {String} opts.taskInvolvedUser Restrict to tasks with a historic identity link to the given user.
     * @param {String} opts.taskInvolvedGroup Restrict to tasks with a historic identity link to the given group.
     * @param {String} opts.taskHadCandidateUser Restrict to tasks with a historic identity link to the given candidate user.
     * @param {String} opts.taskHadCandidateGroup Restrict to tasks with a historic identity link to the given candidate group.     
     * @param {Boolean} opts.withCandidateGroups Only include tasks which have a candidate group. Value may only be true, as false is the default behavior. (default to false)
     * @param {Boolean} opts.withoutCandidateGroups Only include tasks which have no candidate group. Value may only be true, as false is the default behavior. (default to false)
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @return {Promise<Array.<HistoryTaskDto>>}
     */
    async getHistoricTasks(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'taskId': opts['taskId'],
        'taskParentTaskId': opts['taskParentTaskId'],
        'processInstanceId': opts['processInstanceId'],
        'processInstanceBusinessKey': opts['processInstanceBusinessKey'],
        'processInstanceBusinessKeyIn': opts['processInstanceBusinessKeyIn'],
        'processInstanceBusinessKeyLike': opts['processInstanceBusinessKeyLike'],
        'executionId': opts['executionId'],
        'processDefinitionId': opts['processDefinitionId'],
        'processDefinitionKey': opts['processDefinitionKey'],
        'processDefinitionName': opts['processDefinitionName'],
        'caseInstanceId': opts['caseInstanceId'],
        'caseExecutionId': opts['caseExecutionId'],
        'caseDefinitionId': opts['caseDefinitionId'],
        'caseDefinitionKey': opts['caseDefinitionKey'],
        'caseDefinitionName': opts['caseDefinitionName'],
        'activityInstanceIdIn': opts['activityInstanceIdIn'],
        'taskName': opts['taskName'],
        'taskNameLike': opts['taskNameLike'],
        'taskDescription': opts['taskDescription'],
        'taskDescriptionLike': opts['taskDescriptionLike'],
        'taskDefinitionKey': opts['taskDefinitionKey'],
        'taskDefinitionKeyIn': opts['taskDefinitionKeyIn'],
        'taskDeleteReason': opts['taskDeleteReason'],
        'taskDeleteReasonLike': opts['taskDeleteReasonLike'],
        'taskAssignee': opts['taskAssignee'],
        'taskAssigneeLike': opts['taskAssigneeLike'],
        'taskOwner': opts['taskOwner'],
        'taskOwnerLike': opts['taskOwnerLike'],
        'taskPriority': opts['taskPriority'],
        'assigned': opts['assigned'],
        'unassigned': opts['unassigned'],
        'finished': opts['finished'],
        'unfinished': opts['unfinished'],
        'processFinished': opts['processFinished'],
        'processUnfinished': opts['processUnfinished'],
        'taskDueDate': opts['taskDueDate'],
        'taskDueDateBefore': opts['taskDueDateBefore'],
        'taskDueDateAfter': opts['taskDueDateAfter'],
        'taskFollowUpDate': opts['taskFollowUpDate'],
        'taskFollowUpDateBefore': opts['taskFollowUpDateBefore'],
        'taskFollowUpDateAfter': opts['taskFollowUpDateAfter'],
        'startedBefore': opts['startedBefore'],
        'startedAfter': opts['startedAfter'],
        'finishedBefore': opts['finishedBefore'],
        'finishedAfter': opts['finishedAfter'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId'],
        'taskVariables': opts['taskVariables'],
        'processVariables': opts['processVariables'],
        'variableNamesIgnoreCase': opts['variableNamesIgnoreCase'],
        'variableValuesIgnoreCase': opts['variableValuesIgnoreCase'],
        'taskInvolvedUser': opts['taskInvolvedUser'],
        'taskInvolvedGroup': opts['taskInvolvedGroup'],
        'taskHadCandidateUser': opts['taskHadCandidateUser'],
        'taskHadCandidateGroup': opts['taskHadCandidateGroup'],
        'withCandidateGroups': opts['withCandidateGroups'],
        'withoutCandidateGroups': opts['withoutCandidateGroups'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HistoryTaskDto];

      return this.callApi(
        '/history/task', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
