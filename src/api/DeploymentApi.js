/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import CountResultDto from '../model/CountResultDto';
import DeploymentDto from '../model/DeploymentDto';
import DeploymentResourceDto from '../model/DeploymentResourceDto';
import DeploymentWithDefinitionsDto from '../model/DeploymentWithDefinitionsDto';
import ExceptionDto from '../model/ExceptionDto';
import ParseExceptionDto from '../model/ParseExceptionDto';
import RedeploymentDto from '../model/RedeploymentDto';

/**
* Deployment service.
* @module api/DeploymentApi
* @version 7.14.0
*/
export default class DeploymentApi extends ApiClient {

    /**
    * Constructs a new DeploymentApi. 
    * @alias module:api/DeploymentApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tenantId The tenant id for the deployment to be created.
     * @param {String} opts.deploymentSource The source for the deployment to be created.
     * @param {Boolean} opts.deployChangedOnly A flag indicating whether the process engine should perform duplicate checking on a per-resource basis. If set to true, only those resources that have actually changed are deployed. Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources. If set to true, the option enable-duplicate-filtering is overridden and set to true. (default to false)
     * @param {Boolean} opts.enableDuplicateFiltering A flag indicating whether the process engine should perform duplicate checking for the deployment or not. This allows you to check if a deployment with the same name and the same resouces already exists and if true, not create a new deployment but instead return the existing deployment. The default value is false. (default to false)
     * @param {String} opts.deploymentName The name for the deployment to be created.
     * @param {File} opts.data The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment.
     * @return {Promise<DeploymentWithDefinitionsDto>}
     */
    async createDeployment(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'tenant-id': opts['tenantId'],
        'deployment-source': opts['deploymentSource'],
        'deploy-changed-only': opts['deployChangedOnly'],
        'enable-duplicate-filtering': opts['enableDuplicateFiltering'],
        'deployment-name': opts['deploymentName'],
        'data': opts['data']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = DeploymentWithDefinitionsDto;

      return this.callApi(
        '/deployment/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a deployment by id.
     * @param {String} id The id of the deployment to be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade `true`, if all process instances, historic process instances and jobs for this deployment should be deleted. (default to false)
     * @param {Boolean} opts.skipCustomListeners `true`, if only the built-in ExecutionListeners should be notified with the end event. (default to false)
     * @param {Boolean} opts.skipIoMappings `true`, if all input/output mappings should not be invoked. (default to false)
     * @return {Promise}
     */
    async deleteDeployment(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDeployment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade'],
        'skipCustomListeners': opts['skipCustomListeners'],
        'skipIoMappings': opts['skipIoMappings']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.callApi(
        '/deployment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves a deployment by id, according to the `Deployment` interface of the engine.
     * @param {String} id The id of the deployment.
     * @return {Promise<Array.<DeploymentDto>>}
     */
    async getDeployment(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeployment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeploymentDto];

      return this.callApi(
        '/deployment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves a deployment resource by resource id for the given deployment.
     * @param {String} id The id of the deployment
     * @param {String} resourceId The id of the deployment resource
     * @return {Promise<DeploymentResourceDto>}
     */
    async getDeploymentResource(id, resourceId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeploymentResource");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getDeploymentResource");
      }

      let pathParams = {
        'id': id,
        'resourceId': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentResourceDto;

      return this.callApi(
        '/deployment/{id}/resources/{resourceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the binary content of a deployment resource for the given deployment by id.
     * @param {String} id The id of the deployment.
     * @param {String} resourceId The id of the deployment resource.
     * @return {Promise<File>}
     */
    async getDeploymentResourceData(id, resourceId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeploymentResourceData");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getDeploymentResourceData");
      }

      let pathParams = {
        'id': id,
        'resourceId': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', '*/*', 'application/json'];
      let returnType = File;

      return this.callApi(
        '/deployment/{id}/resources/{resourceId}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves all deployment resources of a given deployment.
     * @param {String} id The id of the deployment to retrieve the deployment resources for.
     * @return {Promise<Array.<DeploymentResourceDto>>}
     */
    async getDeploymentResources(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeploymentResources");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeploymentResourceDto];

      return this.callApi(
        '/deployment/{id}/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Filter by deployment id
     * @param {String} opts.name Filter by the deployment name. Exact match.
     * @param {String} opts.nameLike Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains (`%`name`%`).
     * @param {String} opts.source Filter by the deployment source.
     * @param {Boolean} opts.withoutSource Filter by the deployment source whereby source is equal to `null`. (default to false)
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include deployments which belong to no tenant. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.includeDeploymentsWithoutTenantId Include deployments which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Date} opts.after Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.before Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @return {Promise<Array.<DeploymentDto>>}
     */
    async getDeployments(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'nameLike': opts['nameLike'],
        'source': opts['source'],
        'withoutSource': opts['withoutSource'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId'],
        'includeDeploymentsWithoutTenantId': opts['includeDeploymentsWithoutTenantId'],
        'after': opts['after'],
        'before': opts['before'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeploymentDto];

      return this.callApi(
        '/deployment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Filter by deployment id
     * @param {String} opts.name Filter by the deployment name. Exact match.
     * @param {String} opts.nameLike Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains (`%`name`%`).
     * @param {String} opts.source Filter by the deployment source.
     * @param {Boolean} opts.withoutSource Filter by the deployment source whereby source is equal to `null`. (default to false)
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include deployments which belong to no tenant. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Boolean} opts.includeDeploymentsWithoutTenantId Include deployments which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior. (default to false)
     * @param {Date} opts.after Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @param {Date} opts.before Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     * @return {Promise<CountResultDto>}
     */
    async getDeploymentsCount(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'nameLike': opts['nameLike'],
        'source': opts['source'],
        'withoutSource': opts['withoutSource'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId'],
        'includeDeploymentsWithoutTenantId': opts['includeDeploymentsWithoutTenantId'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.callApi(
        '/deployment/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties `resourceIds` or `resourceNames`. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     * @param {String} id The id of the deployment to re-deploy.
     * @param {Object} opts Optional parameters
     * @param {RedeploymentDto} opts.redeploymentDto 
     * @return {Promise<DeploymentWithDefinitionsDto>}
     */
    async redeploy(id, opts) {
      opts = opts || {};
      let postBody = opts['redeploymentDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling redeploy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentWithDefinitionsDto;

      return this.callApi(
        '/deployment/{id}/redeploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
