/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import CountResultDto from '../model/CountResultDto';
import EventSubscriptionDto from '../model/EventSubscriptionDto';
import ExceptionDto from '../model/ExceptionDto';

/**
* EventSubscription service.
* @module api/EventSubscriptionApi
* @version 7.14.0
*/
export default class EventSubscriptionApi extends ApiClient {

    /**
    * Constructs a new EventSubscriptionApi. 
    * @alias module:api/EventSubscriptionApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.14/reference/rest/event-subscription/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventSubscriptionId Only select subscription with the given id.
     * @param {String} opts.eventName Only select subscriptions for events with the given name.
     * @param {String} opts.eventType Only select subscriptions for events with the given type. Valid values: `message`, `signal`, `compensate` and `conditional`.
     * @param {String} opts.executionId Only select subscriptions that belong to an execution with the given id.
     * @param {String} opts.processInstanceId Only select subscriptions that belong to a process instance with the given id.
     * @param {String} opts.activityId Only select subscriptions that belong to an activity with the given id.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only select subscriptions which have no tenant id. Value may only be `true`, as `false` is the default behavior.
     * @param {Boolean} opts.includeEventSubscriptionsWithoutTenantId Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be `true`, as `false` is the default behavior.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @return {Promise<Array.<EventSubscriptionDto>>}
     */
    async getEventSubscriptions(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'eventSubscriptionId': opts['eventSubscriptionId'],
        'eventName': opts['eventName'],
        'eventType': opts['eventType'],
        'executionId': opts['executionId'],
        'processInstanceId': opts['processInstanceId'],
        'activityId': opts['activityId'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId'],
        'includeEventSubscriptionsWithoutTenantId': opts['includeEventSubscriptionsWithoutTenantId'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'firstResult': opts['firstResult'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventSubscriptionDto];

      return this.callApi(
        '/event-subscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.14/reference/rest/event-subscription/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventSubscriptionId Only select subscription with the given id.
     * @param {String} opts.eventName Only select subscriptions for events with the given name.
     * @param {String} opts.eventType Only select subscriptions for events with the given type. Valid values: `message`, `signal`, `compensate` and `conditional`.
     * @param {String} opts.executionId Only select subscriptions that belong to an execution with the given id.
     * @param {String} opts.processInstanceId Only select subscriptions that belong to a process instance with the given id.
     * @param {String} opts.activityId Only select subscriptions that belong to an activity with the given id.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only select subscriptions which have no tenant id. Value may only be `true`, as `false` is the default behavior.
     * @param {Boolean} opts.includeEventSubscriptionsWithoutTenantId Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be `true`, as `false` is the default behavior.
     * @return {Promise<CountResultDto>}
     */
    async getEventSubscriptionsCount(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'eventSubscriptionId': opts['eventSubscriptionId'],
        'eventName': opts['eventName'],
        'eventType': opts['eventType'],
        'executionId': opts['executionId'],
        'processInstanceId': opts['processInstanceId'],
        'activityId': opts['activityId'],
        'tenantIdIn': opts['tenantIdIn'],
        'withoutTenantId': opts['withoutTenantId'],
        'includeEventSubscriptionsWithoutTenantId': opts['includeEventSubscriptionsWithoutTenantId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.callApi(
        '/event-subscription/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
