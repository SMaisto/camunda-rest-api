/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import AuthorizationExceptionDto from '../model/AuthorizationExceptionDto';
import EvaluationConditionDto from '../model/EvaluationConditionDto';
import ExceptionDto from '../model/ExceptionDto';
import ProcessInstanceDto from '../model/ProcessInstanceDto';

/**
* Condition service.
* @module api/ConditionApi
* @version 7.14.0
*/
export default class ConditionApi extends ApiClient {

    /**
    * Constructs a new ConditionApi. 
    * @alias module:api/ConditionApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Triggers evaluation of conditions for conditional start event(s).  Internally this maps to the engines condition evaluation builder method ConditionEvaluationBuilder#evaluateStartConditions().  For more information see the [Conditional Start Events](https://docs.camunda.org/manual/7.14/reference/bpmn20/events/conditional-events/#conditional-start-event) section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.14/reference/bpmn20/).
     * @param {Object} opts Optional parameters
     * @param {EvaluationConditionDto} opts.evaluationConditionDto 
     * @return {Promise<Array.<ProcessInstanceDto>>}
     */
    async evaluateCondition(opts) {
      opts = opts || {};
      let postBody = opts['evaluationConditionDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProcessInstanceDto];

      return this.callApi(
        '/condition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
