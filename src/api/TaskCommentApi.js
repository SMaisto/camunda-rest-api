/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import AuthorizationExceptionDto from '../model/AuthorizationExceptionDto';
import CommentDto from '../model/CommentDto';
import ExceptionDto from '../model/ExceptionDto';

/**
* TaskComment service.
* @module api/TaskCommentApi
* @version 7.14.0
*/
export default class TaskCommentApi extends ApiClient {

    /**
    * Constructs a new TaskCommentApi. 
    * @alias module:api/TaskCommentApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Creates a comment for a task by id.
     * @param {String} id The id of the task to add the comment to.
     * @param {Object} opts Optional parameters
     * @param {CommentDto} opts.commentDto **Note:** Only the `message` property will be used. Every other property passed to this endpoint will be ignored.
     * @return {Promise<CommentDto>}
     */
    async createComment(id, opts) {
      opts = opts || {};
      let postBody = opts['commentDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createComment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentDto;

      return this.callApi(
        '/task/{id}/comment/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves a task comment by task id and comment id.
     * @param {String} id The id of the task.
     * @param {String} commentId The id of the comment to be retrieved.
     * @return {Promise<CommentDto>}
     */
    async getComment(id, commentId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling getComment");
      }

      let pathParams = {
        'id': id,
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentDto;

      return this.callApi(
        '/task/{id}/comment/{commentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets the comments for a task by id.
     * @param {String} id The id of the task to retrieve the comments for.
     * @return {Promise<Array.<CommentDto>>}
     */
    async getComments(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CommentDto];

      return this.callApi(
        '/task/{id}/comment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
