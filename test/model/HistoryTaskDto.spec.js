/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaBpmRestApi);
  }
}(this, function(expect, CamundaBpmRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaBpmRestApi.HistoryTaskDto();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HistoryTaskDto', function() {
    it('should create an instance of HistoryTaskDto', function() {
      // uncomment below and update the code to test HistoryTaskDto
      //var instance = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be.a(CamundaBpmRestApi.HistoryTaskDto);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
      // uncomment below and update the code to test the property processDefinitionKey
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
      // uncomment below and update the code to test the property processDefinitionId
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property processInstanceId (base name: "processInstanceId")', function() {
      // uncomment below and update the code to test the property processInstanceId
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property executionId (base name: "executionId")', function() {
      // uncomment below and update the code to test the property executionId
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property caseDefinitionKey (base name: "caseDefinitionKey")', function() {
      // uncomment below and update the code to test the property caseDefinitionKey
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property caseDefinitionId (base name: "caseDefinitionId")', function() {
      // uncomment below and update the code to test the property caseDefinitionId
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property caseInstanceId (base name: "caseInstanceId")', function() {
      // uncomment below and update the code to test the property caseInstanceId
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property caseExecutionId (base name: "caseExecutionId")', function() {
      // uncomment below and update the code to test the property caseExecutionId
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property activityInstanceId (base name: "activityInstanceId")', function() {
      // uncomment below and update the code to test the property activityInstanceId
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property deleteReason (base name: "deleteReason")', function() {
      // uncomment below and update the code to test the property deleteReason
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property assignee (base name: "assignee")', function() {
      // uncomment below and update the code to test the property assignee
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "endTime")', function() {
      // uncomment below and update the code to test the property endTime
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property taskDefinitionKey (base name: "taskDefinitionKey")', function() {
      // uncomment below and update the code to test the property taskDefinitionKey
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property priority (base name: "priority")', function() {
      // uncomment below and update the code to test the property priority
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property due (base name: "due")', function() {
      // uncomment below and update the code to test the property due
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property parentTaskId (base name: "parentTaskId")', function() {
      // uncomment below and update the code to test the property parentTaskId
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property followUp (base name: "followUp")', function() {
      // uncomment below and update the code to test the property followUp
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property tenantId (base name: "tenantId")', function() {
      // uncomment below and update the code to test the property tenantId
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property removalTime (base name: "removalTime")', function() {
      // uncomment below and update the code to test the property removalTime
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

    it('should have the property rootProcessInstanceId (base name: "rootProcessInstanceId")', function() {
      // uncomment below and update the code to test the property rootProcessInstanceId
      //var instane = new CamundaBpmRestApi.HistoryTaskDto();
      //expect(instance).to.be();
    });

  });

}));
