/**
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaBpmRestApi);
  }
}(this, function(expect, CamundaBpmRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HistoricProcessInstanceQueryDto', function() {
    it('should create an instance of HistoricProcessInstanceQueryDto', function() {
      // uncomment below and update the code to test HistoricProcessInstanceQueryDto
      //var instance = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be.a(CamundaBpmRestApi.HistoricProcessInstanceQueryDto);
    });

    it('should have the property processInstanceId (base name: "processInstanceId")', function() {
      // uncomment below and update the code to test the property processInstanceId
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property processInstanceIds (base name: "processInstanceIds")', function() {
      // uncomment below and update the code to test the property processInstanceIds
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
      // uncomment below and update the code to test the property processDefinitionId
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
      // uncomment below and update the code to test the property processDefinitionKey
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property processDefinitionKeyIn (base name: "processDefinitionKeyIn")', function() {
      // uncomment below and update the code to test the property processDefinitionKeyIn
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property processDefinitionName (base name: "processDefinitionName")', function() {
      // uncomment below and update the code to test the property processDefinitionName
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property processDefinitionNameLike (base name: "processDefinitionNameLike")', function() {
      // uncomment below and update the code to test the property processDefinitionNameLike
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property processDefinitionKeyNotIn (base name: "processDefinitionKeyNotIn")', function() {
      // uncomment below and update the code to test the property processDefinitionKeyNotIn
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property processInstanceBusinessKey (base name: "processInstanceBusinessKey")', function() {
      // uncomment below and update the code to test the property processInstanceBusinessKey
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property processInstanceBusinessKeyLike (base name: "processInstanceBusinessKeyLike")', function() {
      // uncomment below and update the code to test the property processInstanceBusinessKeyLike
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property rootProcessInstances (base name: "rootProcessInstances")', function() {
      // uncomment below and update the code to test the property rootProcessInstances
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property finished (base name: "finished")', function() {
      // uncomment below and update the code to test the property finished
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property unfinished (base name: "unfinished")', function() {
      // uncomment below and update the code to test the property unfinished
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property withIncidents (base name: "withIncidents")', function() {
      // uncomment below and update the code to test the property withIncidents
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property withRootIncidents (base name: "withRootIncidents")', function() {
      // uncomment below and update the code to test the property withRootIncidents
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property incidentType (base name: "incidentType")', function() {
      // uncomment below and update the code to test the property incidentType
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property incidentStatus (base name: "incidentStatus")', function() {
      // uncomment below and update the code to test the property incidentStatus
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property incidentMessage (base name: "incidentMessage")', function() {
      // uncomment below and update the code to test the property incidentMessage
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property incidentMessageLike (base name: "incidentMessageLike")', function() {
      // uncomment below and update the code to test the property incidentMessageLike
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property startedBefore (base name: "startedBefore")', function() {
      // uncomment below and update the code to test the property startedBefore
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property startedAfter (base name: "startedAfter")', function() {
      // uncomment below and update the code to test the property startedAfter
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property finishedBefore (base name: "finishedBefore")', function() {
      // uncomment below and update the code to test the property finishedBefore
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property finishedAfter (base name: "finishedAfter")', function() {
      // uncomment below and update the code to test the property finishedAfter
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property executedActivityAfter (base name: "executedActivityAfter")', function() {
      // uncomment below and update the code to test the property executedActivityAfter
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property executedActivityBefore (base name: "executedActivityBefore")', function() {
      // uncomment below and update the code to test the property executedActivityBefore
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property executedJobAfter (base name: "executedJobAfter")', function() {
      // uncomment below and update the code to test the property executedJobAfter
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property executedJobBefore (base name: "executedJobBefore")', function() {
      // uncomment below and update the code to test the property executedJobBefore
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property startedBy (base name: "startedBy")', function() {
      // uncomment below and update the code to test the property startedBy
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property superProcessInstanceId (base name: "superProcessInstanceId")', function() {
      // uncomment below and update the code to test the property superProcessInstanceId
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property subProcessInstanceId (base name: "subProcessInstanceId")', function() {
      // uncomment below and update the code to test the property subProcessInstanceId
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property superCaseInstanceId (base name: "superCaseInstanceId")', function() {
      // uncomment below and update the code to test the property superCaseInstanceId
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property subCaseInstanceId (base name: "subCaseInstanceId")', function() {
      // uncomment below and update the code to test the property subCaseInstanceId
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property caseInstanceId (base name: "caseInstanceId")', function() {
      // uncomment below and update the code to test the property caseInstanceId
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
      // uncomment below and update the code to test the property tenantIdIn
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
      // uncomment below and update the code to test the property withoutTenantId
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property executedActivityIdIn (base name: "executedActivityIdIn")', function() {
      // uncomment below and update the code to test the property executedActivityIdIn
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property activeActivityIdIn (base name: "activeActivityIdIn")', function() {
      // uncomment below and update the code to test the property activeActivityIdIn
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property suspended (base name: "suspended")', function() {
      // uncomment below and update the code to test the property suspended
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property completed (base name: "completed")', function() {
      // uncomment below and update the code to test the property completed
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property externallyTerminated (base name: "externallyTerminated")', function() {
      // uncomment below and update the code to test the property externallyTerminated
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property internallyTerminated (base name: "internallyTerminated")', function() {
      // uncomment below and update the code to test the property internallyTerminated
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property variables (base name: "variables")', function() {
      // uncomment below and update the code to test the property variables
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property variableNamesIgnoreCase (base name: "variableNamesIgnoreCase")', function() {
      // uncomment below and update the code to test the property variableNamesIgnoreCase
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property variableValuesIgnoreCase (base name: "variableValuesIgnoreCase")', function() {
      // uncomment below and update the code to test the property variableValuesIgnoreCase
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property orQueries (base name: "orQueries")', function() {
      // uncomment below and update the code to test the property orQueries
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

    it('should have the property sorting (base name: "sorting")', function() {
      // uncomment below and update the code to test the property sorting
      //var instane = new CamundaBpmRestApi.HistoricProcessInstanceQueryDto();
      //expect(instance).to.be();
    });

  });

}));
